"""
Django settings for timedi project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
from datetime import timedelta

from django.utils.translation import ugettext_lazy as _

# from api.email_info import *
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()
env.read_env(os.path.join(BASE_DIR, '.env'))

# email setting
# EMAIL_USE_TLS = os.environ['EMAIL_USE_TLS']
# EMAIL_HOST = os.environ['EMAIL_HOST']
# EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
# EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
# EMAIL_PORT = os.environ['EMAIL_PORT']
#
# APP_URL = os.environ['APP_URL']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    },
    # 'staging': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': os.environ['STAGING_DB_NAME'],
    #     'USER': os.environ['STAGING_DB_USER'],
    #     'PASSWORD': os.environ['STAGING_DB_PASSWORD'],
    #     'HOST': os.environ['STAGING_DB_HOST'],
    #     'PORT': os.environ['STAGING_DB_PORT'],
    # }
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-u2oql(%m0t1n^@41=9d9ar0ed8wtv-s&b4##c)_$wxwyck3m4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG']

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'multiselectfield',
    'corsheaders',
    'rest_framework',
    'rest_framework_swagger',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'timedi_auth',
    'api',
    'notifications',
    'hospital',
    'invoicing',
    'patient',
    'therapeutic_booklets',
    'planning',
    'production',
    'history',
    'simple_history'
]

MIDDLEWARE = [
    'timedi_auth.middleware.RouterMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    
]

DATABASE_ROUTERS = ['timedi_auth.middleware.DatabaseRouter', ]

ROOT_URLCONF = 'timedi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'timedi.wsgi.application'

# Configure the authentication in Django Rest Framework to be JWT
# http://www.django-rest-framework.org/

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'timedi_auth.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'EXCEPTION_HANDLER': 'timedi_auth.utils.custom_exception_handler',
    'NON_FIELD_ERRORS_KEY': 'data',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

AUTH_USER_MODEL = 'timedi_auth.User'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=60),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(),  # minutes=5
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(),  # days=1
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.dirname(
                os.path.dirname(
                    os.path.abspath(
                        __file__,
                    ),
                ),
            ) + '/' + 'auth.log',
        },
    },
    'loggers': {
        'api': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = (
    ('en', _('English')),
    ('pt', _('Portuguese')),
    ('es', _('Spanish')),
    ('fr', _('French')),
)

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

USE_TZ = True
CORS_ORIGIN_ALLOW_ALL = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

DEFAULT_ROLES = ('super_admin', 'admin', 'external_user', 'standard_user')

MODULES = [
    {'display_name': 'Manage Hospital', 'code': 'manage_hospital'},
    {'display_name': 'Manage Patient', 'code': 'manage_patient'},
    {'display_name': 'Manage Therapeutic Booklet', 'code':
        'manage_therapeutic_booklet'},
    {'display_name': 'Manage Planning', 'code': 'manage_planning'},
    {'display_name': 'Manage Pharmacist Control', 'code':
        'manage_pharmacist_control'},
    {'display_name': 'Manage Productions', 'code': 'manage_productions'},
    {'display_name': 'Manage Invoice', 'code': 'manage_invoice'},
    {'display_name': 'Manage History', 'code': 'manage_history'},
    {'display_name': 'Manage Users', 'code': 'manage_users'},
]

NOTIFICATION_TYPES = {
    'sms': 'notifications.notification_senders.SMSNotificationSender',
    'email': 'notifications.notification_senders.EmailNotificationSender'
}

NOTIFICATION_TEMPLATES = ("forgot_password", "new_user")

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

LOGIN_URL = '/api/v1/auth/login/'


